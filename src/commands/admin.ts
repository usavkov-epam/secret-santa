import { Telegraf } from 'telegraf';

import { Season } from '../models/season.model';
import { Participant } from '../models/participant.model';

export const registerAdminCommands = (bot: Telegraf) => {
  const admins = [12345678]; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∞–¥–º–∏–Ω–æ–≤

  const isAdmin = (id: number) => admins.includes(id);

  bot.command('new_season', async (ctx) => {
    if (!isAdmin(ctx.from.id)) {
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }

    const args = ctx.message.text.split(' ').slice(1);
    if (!args[0]) {
      return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Å–µ–∑–æ–Ω–∞: /new_season <–∏–º—è_—Å–µ–∑–æ–Ω–∞>');
    }

    const seasonName = args.join(' ');
    const existingSeason = await Season.findOne({ name: seasonName });

    if (existingSeason) {
      return ctx.reply('‚ùå –°–µ–∑–æ–Ω —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
    }

    const newSeason = new Season({ name: seasonName });
    await newSeason.save();
    ctx.reply(`‚úÖ –ù–æ–≤—ã–π —Å–µ–∑–æ–Ω "${seasonName}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!`);
  });

  bot.command('delete_season', async (ctx) => {
    if (!isAdmin(ctx.from.id)) {
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }

    const args = ctx.message.text.split(' ').slice(1);
    if (!args[0]) {
      return ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Å–µ–∑–æ–Ω–∞: /delete_season <–∏–º—è_—Å–µ–∑–æ–Ω–∞>');
    }

    const seasonName = args.join(' ');
    const deletedSeason = await Season.findOneAndDelete({ name: seasonName });

    if (!deletedSeason) {
      return ctx.reply('‚ùå –°–µ–∑–æ–Ω —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }

    ctx.reply(`‚úÖ –°–µ–∑–æ–Ω "${seasonName}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.`);
  });

  bot.command('list_seasons', async (ctx) => {
    if (!isAdmin(ctx.from.id)) {
      return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }

    const seasons = await Season.find();
    if (seasons.length === 0) {
      return ctx.reply('‚ùå –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–µ–∑–æ–Ω–æ–≤.');
    }

    const seasonList = seasons.map((season) => `- ${season.name}`).join('\n');
    ctx.reply(`üìã –°–ø–∏—Å–æ–∫ —Å–µ–∑–æ–Ω–æ–≤:\n${seasonList}`);
  });
};
